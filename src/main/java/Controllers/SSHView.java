package Controllers;

import javafx.event.ActionEvent;
import javafx.scene.control.*;
import javafx.scene.control.Label;
import javafx.stage.FileChooser;
import javafx.stage.Popup;

import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
//
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.*;
/**
 * Created by Indi on 2/9/2016.
 */
public class SSHView extends SuperView {
    public Label SCENE_LINECOUNT;
    FileChooser fileChooser = new FileChooser();
    File passwdFile;
    BufferedReader br;
    private Desktop desktop = Desktop.getDesktop();
    List PasswordList = new List();
    public int linecounter = 0;
    //
    String user = "root";
    String password = "mypassword";
    String host = "5.9.152.120";
    int port=22;
    JSch jsch;
    ChannelSftp sftpChannel;


    public SSHView() {

    }

    public void browseFile(ActionEvent actionEvent) {

        fileChooser.setTitle("Open Resource File");
        passwdFile = fileChooser.showOpenDialog(new Popup());
        //openFile(passwdFile);
        try {
            parseFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void tryConnection(String pwd){
        new Thread() {
            public void run() {
                long startTime = System.currentTimeMillis();
                try {
                    JSch jsch = new JSch();
                    Session session = jsch.getSession(user, host, port);
                    session.setPassword(pwd);
                    //System.out.println(pwd);
                    session.setConfig("StrictHostKeyChecking", "no");
                    System.out.println("Establishing Connection...");
                    session.connect();
                    //System.out.println("Connection established.");
                    //System.out.println("Crating SFTP Channel.");
                    ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
                    sftpChannel.connect();
                    //System.out.println("SFTP Channel created.");

                } catch (Exception e) {
                    System.err.print(e);
                    System.out.println("Authentication Failed.");
                    long endTime = System.currentTimeMillis();
                    System.out.println("That took " + (endTime - startTime) + " milliseconds");

                    // V best practise thread ending
                    Thread.currentThread().interrupt();//preserve the message
                    return;//Stop doing whatever I am doing and terminate
                }

            }
        }.start();
    }
    public void connectSSH() {
        for (int i = 0; i <PasswordList.getItemCount();i++ ){
            tryConnection(PasswordList.getItem(i));
        }
    }

    private void parseFile() throws IOException {
        try {
            br = new BufferedReader(new FileReader(passwdFile));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        try {
            for (String line; (line = br.readLine()) != null; ) {
                PasswordList.add(line);
                linecounter++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(PasswordList.getItem(4));
        SCENE_LINECOUNT.setText(String.valueOf(linecounter));

    }
}


  /*
    private void openFile(File file) throws IOException {
        try {
            desktop.open(file);
        } catch (IOException ex) {
            Logger.getLogger(
                    SSHView.class.getName()).log(
                    Level.SEVERE, null, ex
            );
        } */ // check the file yourself

    /*    BufferedReader br = new BufferedReader(new FileReader(passwdFile));
        for (String line; (line = br.readLine()) != null;) {
            System.out.print(line + "\n");
        }
    } */ // outprints every line to console.



